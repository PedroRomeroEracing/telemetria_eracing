#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import json
import random

class TelemetriaPublisher(Node):
    def __init__(self):
        super().__init__('telemetria_publisher')
        self.pub = self.create_publisher(String, 'telemetria', 10)

        # gera os ids fixos para cada abordagem
        self.ids_cells_high    = [f"cell_h_{i}" for i in range(96)]
        self.ids_cells_low     = [f"cell_l_{i}" for i in range(8)]
        self.ids_temps_pack    = [f"tp_{i}"     for i in range(30)]
        self.ids_temps_pack_h  = [f"tph_{i}"    for i in range(5)]
        self.ids_temps_motors  = [f"mot_{i}"    for i in range(4)]
        self.ids_temps_invers  = [f"inv_{i}"    for i in range(2)]

        # timer para enviar a cada 0.1s
        self.timer = self.create_timer(0.1, self.timer_callback)

    def timer_callback(self):
        # valores escalares
        vel      = round(random.uniform(0, 150), 2)   # Km/h
        t_pack_h = round(random.uniform(300, 400), 2) # V
        t_pack_l = round(random.uniform(40, 60), 2)   # V

        # gera listas de valores
        raw_cells_high   = [round(random.uniform(3.0, 4.2), 3) for _ in range(96)]
        raw_cells_low    = [round(random.uniform(3.0, 4.2), 3) for _ in range(8)]
        raw_temps_pack   = [round(random.uniform(10, 60), 1) for _ in range(30)]
        raw_temps_pack_h = [round(random.uniform(10, 60), 1) for _ in range(5)]
        raw_temps_motors = [round(random.uniform(20, 100), 1) for _ in range(4)]
        raw_temps_invers = [round(random.uniform(20, 90), 1)  for _ in range(2)]

        # monta dicion√°rios a partir dos IDs fixos
        cells_high = {
            id_: val for id_, val in zip(self.ids_cells_high, raw_cells_high)
        }
        cells_low = {
            id_: val for id_, val in zip(self.ids_cells_low, raw_cells_low)
        }
        temps_pack = {
            id_: val for id_, val in zip(self.ids_temps_pack, raw_temps_pack)
        }
        temps_pack_h = {
            id_: val for id_, val in zip(self.ids_temps_pack_h, raw_temps_pack_h)
        }
        temps_motors = {
            id_: val for id_, val in zip(self.ids_temps_motors, raw_temps_motors)
        }
        temps_invers = {
            id_: val for id_, val in zip(self.ids_temps_invers, raw_temps_invers)
        }

        payload = {
            "Velocidade":             {"value": vel},
            "Tensao_pack_alta":       {"value": t_pack_h},
            "Tensao_pack_baixa":      {"value": t_pack_l},
            "Tensoes_celulas_alta":   {"values": cells_high},
            "Tensoes_celulas_baixa":  {"values": cells_low},
            "Temps_pack":             {"values": temps_pack},
            "Temps_pack_alta":        {"values": temps_pack_h},
            "Temps_motores":          {"values": temps_motors},
            "Temps_inversores":       {"values": temps_invers},
        }

        msg = String()
        msg.data = json.dumps(payload)
        self.pub.publish(msg)
        self.get_logger().debug(f'Publicado payload com {len(payload)} chaves')

def main(args=None):
    rclpy.init(args=args)
    node = TelemetriaPublisher()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if _name_ == '_main_':
    main()